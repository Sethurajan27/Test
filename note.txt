C:\Users\sethurajan.r\Desktop\tamil_news>python main.py
Traceback (most recent call last):
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connectionpool.py", line 464, in _make_request
    self._validate_conn(conn)
    ~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connectionpool.py", line 1093, in _validate_conn
    conn.connect()
    ~~~~~~~~~~~~^^
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connection.py", line 741, in connect
    sock_and_verified = _ssl_wrap_socket_and_match_hostname(
        sock=sock,
    ...<14 lines>...
        assert_fingerprint=self.assert_fingerprint,
    )
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connection.py", line 920, in _ssl_wrap_socket_and_match_hostname
    ssl_sock = ssl_wrap_socket(
        sock=sock,
    ...<8 lines>...
        tls_in_tls=tls_in_tls,
    )
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\util\ssl_.py", line 480, in ssl_wrap_socket
    ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\util\ssl_.py", line 524, in _ssl_wrap_socket_impl
    return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python313\Lib\ssl.py", line 455, in wrap_socket
    return self.sslsocket_class._create(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        sock=sock,
        ^^^^^^^^^^
    ...<5 lines>...
        session=session
        ^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Program Files\Python313\Lib\ssl.py", line 1076, in _create
    self.do_handshake()
    ~~~~~~~~~~~~~~~~~^^
  File "C:\Program Files\Python313\Lib\ssl.py", line 1372, in do_handshake
    self._sslobj.do_handshake()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1028)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connectionpool.py", line 787, in urlopen
    response = self._make_request(
        conn,
    ...<10 lines>...
        **response_kw,
    )
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connectionpool.py", line 488, in _make_request
    raise new_e
urllib3.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1028)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
        method=request.method,
    ...<9 lines>...
        chunked=chunked,
    )
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\connectionpool.py", line 841, in urlopen
    retries = retries.increment(
        method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]
    )
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\urllib3\util\retry.py", line 519, in increment
    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.mail.tm', port=443): Max retries exceeded with url: /domains (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1028)')))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\sethurajan.r\Desktop\tamil_news\main.py", line 38, in <module>
    main()
    ~~~~^^
  File "C:\Users\sethurajan.r\Desktop\tamil_news\main.py", line 9, in main
    mail_client = MailTMClient()
  File "C:\Users\sethurajan.r\Desktop\tamil_news\src\mailtm_client.py", line 8, in __init__
    self.account = self.create_account()
                   ~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\sethurajan.r\Desktop\tamil_news\src\mailtm_client.py", line 12, in create_account
    domain = self.session.get(f'{self.base_url}/domains').json()['hydra:member'][0]['domain']
             ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\requests\sessions.py", line 602, in get
    return self.request("GET", url, **kwargs)
           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
  File "C:\Users\sethurajan.r\AppData\Roaming\Python\Python313\site-packages\requests\adapters.py", line 517, in send
    raise SSLError(e, request=request)
requests.exceptions.SSLError: HTTPSConnectionPool(host='api.mail.tm', port=443): Max retries exceeded with url: /domains (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1028)')))




https://chatgpt.com/share/68411062-7efc-800a-9513-61e166bd0b54

GOOGLE_DRIVE_FOLDER_ID=1zWdn50DVXpBWcuX62wP2UoR0M2WU6_jb

requirements.txt
# HTTP requests
requests==2.31.0

# Web automation
selenium==4.21.0

# OpenAI API
openai==1.30.1

# Optional (for handling Chrome driver)
webdriver-manager==4.0.1




# Folder Structure

project/
├── src/
│   ├── mailtm_client.py
│   ├── openai_signup.py
│   ├── elevenlabs_signup.py
│   ├── generate_tamil_news.py
│   ├── tts_convert.py
│   ├── upload_to_drive.py
│   ├── prompts.py
│   └── delete_accounts.py
└── main.py

---

### src/mailtm_client.py
```python
import requests
import time

class MailTMClient:
    def __init__(self):
        self.base_url = 'https://api.mail.tm'
        self.session = requests.Session()
        self.account = self.create_account()
        self.token = self.get_token()

    def create_account(self):
        domain = self.session.get(f'{self.base_url}/domains').json()['hydra:member'][0]['domain']
        email = f'test{int(time.time())}@{domain}'
        password = 'Password123!'
        response = self.session.post(f'{self.base_url}/accounts', json={'address': email, 'password': password})
        return {'email': email, 'password': password}

    def get_token(self):
        response = self.session.post(f'{self.base_url}/token', json=self.account)
        return response.json()['token']

    def wait_for_email(self, subject_keyword, timeout=300):
        headers = {'Authorization': f'Bearer {self.token}'}
        start_time = time.time()
        while time.time() - start_time < timeout:
            messages = self.session.get(f'{self.base_url}/messages', headers=headers).json()['hydra:member']
            for message in messages:
                if subject_keyword in message['subject']:
                    msg = self.session.get(f"{self.base_url}/messages/{message['id']}", headers=headers).json()
                    return msg['text']
            time.sleep(5)
        raise TimeoutError("Email not received within timeout period.")
```

### src/openai_signup.py
```python
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from src.mailtm_client import MailTMClient
import time
import re

def init_driver(headless=True):
    options = Options()
    if headless:
        options.add_argument('--headless')
    driver = webdriver.Chrome(options=options)
    return driver

def openai_signup(driver, mail_client):
    email = mail_client.account['email']
    password = mail_client.account['password']

    driver.get('https://auth.openai.com/signup')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'email'))).send_keys(email)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Continue')]").click()
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'password'))).send_keys(password)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Continue')]").click()

    print("Waiting for verification email...")
    email_text = mail_client.wait_for_email("Verify your email")
    
    match = re.search(r'https://auth\\.openai\\.com[^\\s]+', email_text)
    if match:
        verification_link = match.group(0)
        driver.get(verification_link)
        print("Verification complete.")
    else:
        raise Exception("Verification link not found in email.")
```

### src/elevenlabs_signup.py
```python
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from src.mailtm_client import MailTMClient
import time
import re

def elevenlabs_signup(driver, mail_client):
    email = mail_client.account['email']
    password = mail_client.account['password']

    driver.get('https://www.elevenlabs.io/signup')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'email'))).send_keys(email)
    driver.find_element(By.NAME, 'password').send_keys(password)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Sign Up')]").click()

    print("Waiting for ElevenLabs verification email...")
    email_text = mail_client.wait_for_email("Verify your email")
    
    match = re.search(r'https://[^\\s]*elevenlabs\\.io[^\\s]+', email_text)
    if match:
        verification_link = match.group(0)
        driver.get(verification_link)
        print("Email verified for ElevenLabs.")
    else:
        raise Exception("Verification link not found in email.")

    driver.get('https://www.elevenlabs.io/login')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'email'))).send_keys(email)
    driver.find_element(By.NAME, 'password').send_keys(password)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Log In')]").click()

    time.sleep(5)
    driver.get('https://www.elevenlabs.io/account')
    time.sleep(3)
    api_key_element = driver.find_element(By.XPATH, "//*[contains(text(),'API key')]/following-sibling::div")
    api_key = api_key_element.text
    print("Retrieved ElevenLabs API key:", api_key)
    return api_key
```

### src/delete_accounts.py
```python
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def delete_openai_account(driver, email, password):
    driver.get('https://platform.openai.com/login')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'email'))).send_keys(email)
    driver.find_element(By.NAME, 'password').send_keys(password)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Continue') or contains(text(), 'Log in')]").click()
    time.sleep(5)
    driver.get("https://platform.openai.com/account/settings")
    time.sleep(5)
    driver.find_element(By.XPATH, "//button[contains(text(),'Delete account')]").click()
    time.sleep(3)
    driver.find_element(By.XPATH, "//button[contains(text(),'Delete')]").click()
    print("OpenAI account deletion triggered.")

def delete_elevenlabs_account(driver):
    driver.get('https://www.elevenlabs.io/account')
    time.sleep(5)
    driver.find_element(By.XPATH, "//button[contains(text(),'Delete Account')]").click()
    time.sleep(3)
    driver.find_element(By.XPATH, "//button[contains(text(),'Confirm')]").click()
    print("ElevenLabs account deletion triggered.")
```

### Modify `src/upload_to_drive.py` to:
```python
import requests
import base64
import os
from src.delete_accounts import delete_openai_account, delete_elevenlabs_account

def upload_to_drive_via_webapp(file_path, web_app_url, file_name=None, folder_id=None, driver=None, email=None, password=None):
    with open(file_path, 'rb') as f:
        file_data = base64.b64encode(f.read()).decode('utf-8')

    if file_name is None:
        file_name = os.path.basename(file_path)

    payload = {
        'fileName': file_name,
        'fileData': file_data
    }

    if folder_id:
        payload['folderId'] = folder_id

    response = requests.post(web_app_url, data=payload)
    result = response.json()

    if result.get("success"):
        print("Upload successful. Deleting accounts...")
        if driver and email and password:
            delete_openai_account(driver, email, password)
            delete_elevenlabs_account(driver)
    else:
        print("Upload failed:", result.get("error"))

    return result
```
