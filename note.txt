const SHEET_NAME = 'TempMail Logs';
const LOG_SHEET_NAME = 'Process Logs';

function ensureSpreadsheet() {
  const props = PropertiesService.getScriptProperties();
  let sheetId = props.getProperty('sheetId');
  let ss;

  if (!sheetId) {
    ss = SpreadsheetApp.create("TempMail Inbox Logs");
    props.setProperty('sheetId', ss.getId());

    const inboxSheet = ss.getActiveSheet();
    inboxSheet.setName(SHEET_NAME);
    inboxSheet.appendRow(["MyMailId", "Timestamp", "SenderMailId", "Subject", "OTP", "VerificationLink", "Body"]);

    const logSheet = ss.insertSheet(LOG_SHEET_NAME);
    logSheet.appendRow(["Timestamp", "Log"]);

  } else {
    ss = SpreadsheetApp.openById(sheetId);
  }

  return ss;
}

function logProcess(msg) {
  const ss = ensureSpreadsheet();
  const logSheet = ss.getSheetByName(LOG_SHEET_NAME);
  logSheet.appendRow([new Date(), msg]);
}

function startMonitoring() {
  logProcess("START: Monitoring initiated");

  const props = PropertiesService.getScriptProperties();
  props.setProperty('monitoring', 'true');

  const domainRes = UrlFetchApp.fetch('https://api.mail.tm/domains');
  const domain = JSON.parse(domainRes.getContentText())['hydra:member'][0].domain;
  const email = `user${Date.now()}@${domain}`;
  const password = `P@ss${Date.now()}`;

  logProcess("Generated email: " + email);

  UrlFetchApp.fetch('https://api.mail.tm/accounts', {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });
  logProcess("Created temp mail account");

  const loginRes = UrlFetchApp.fetch('https://api.mail.tm/token', {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });

  const loginData = JSON.parse(loginRes.getContentText());
  const token = loginData.token;

  logProcess("Obtained token");

  props.setProperty('token', token);
  props.setProperty('email', email);

  const ss = ensureSpreadsheet();
  const inboxSheet = ss.getSheetByName(SHEET_NAME);
  inboxSheet.appendRow([email, new Date(), "NULL", "STARTED", "NULL", "NULL", "NULL"]);
  logProcess("Logged STARTED row to inbox");

  ScriptApp.getProjectTriggers().forEach(t => {
    if (t.getHandlerFunction() === 'fetchInbox') ScriptApp.deleteTrigger(t);
  });

  ScriptApp.newTrigger('fetchInbox')
    .timeBased()
    .everyMinutes(1)
    .create();

  logProcess("Created polling trigger");

  return "ok";
}

function stopMonitoring() {
  const props = PropertiesService.getScriptProperties();
  props.setProperty('monitoring', 'false');

  ScriptApp.getProjectTriggers().forEach(t => {
    if (t.getHandlerFunction() === 'fetchInbox') ScriptApp.deleteTrigger(t);
  });

  logProcess("Monitoring stopped");
  return "ok";
}

function fetchInbox() {
  const props = PropertiesService.getScriptProperties();
  if (props.getProperty('monitoring') !== 'true') return;

  const token = props.getProperty('token');
  const email = props.getProperty('email');
  const ss = ensureSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_NAME);
  const existing = sheet.getDataRange().getValues();
  const existingKeys = new Set(existing.map(r => r[1] + r[3]));

  const response = UrlFetchApp.fetch("https://api.mail.tm/messages", {
    headers: { Authorization: `Bearer ${token}` }
  });

  const messages = JSON.parse(response.getContentText())['hydra:member'];
  logProcess("Inbox polled: " + messages.length + " messages");

  messages.forEach(msg => {
    if (existingKeys.has(msg.createdAt + msg.subject)) return;

    const fullMsgRes = UrlFetchApp.fetch(`https://api.mail.tm/messages/${msg.id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });

    const fullMsg = JSON.parse(fullMsgRes.getContentText());
    const otp = fullMsg.text.match(/\b\d{4,8}\b/);
    const link = fullMsg.text.match(/https?:\/\/[^\s]+/);

    sheet.appendRow([
      email,
      msg.createdAt,
      msg.from.address,
      msg.subject,
      otp ? otp[0] : "NULL",
      link ? link[0] : "NULL",
      fullMsg.text
    ]);

    logProcess("New message logged: " + msg.subject);
  });
}

function getLogs() {
  const ss = ensureSpreadsheet();
  return ss.getSheetByName(SHEET_NAME).getDataRange().getValues();
}

function getProcessLogs() {
  const ss = ensureSpreadsheet();
  return ss.getSheetByName(LOG_SHEET_NAME).getDataRange().getValues();
}

function getEmail() {
  return PropertiesService.getScriptProperties().getProperty('email') || '';
}

function doGet() {
  return HtmlService.createHtmlOutputFromFile('Index');
}



<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <style>
      body { font-family: Arial, sans-serif; padding: 20px; }
      button { margin: 5px; padding: 10px 20px; font-size: 16px; }
      .section { margin-bottom: 20px; }
      pre { background: #f4f4f4; padding: 12px; border-radius: 6px; white-space: pre-wrap; max-height: 300px; overflow-y: auto; }
    </style>
  </head>
  <body>
    <h2>üì¨ Temp Mail Monitor</h2>
    <div class="section">
      <button onclick="start()">‚ñ∂ Start Monitoring</button>
      <button onclick="stop()">‚èπ Stop Monitoring</button>
      <p id="email">üìß Temp Email: <em>Not started</em></p>
    </div>

    <div class="section">
      <h3>üß† Process Log</h3>
      <div id="processLogs"><pre>Loading process logs...</pre></div>
    </div>

    <div class="section">
      <h3>üìÑ Inbox Log (Spreadsheet)</h3>
      <div id="sheetLogs"><pre>Loading sheet logs...</pre></div>
    </div>

    <script>
      function start() {
        document.getElementById("email").innerText = "üìß Temp Email: starting...";
        google.script.run.withSuccessHandler(() => {
          refresh();
        }).startMonitoring();
      }

      function stop() {
        google.script.run.withSuccessHandler(() => {
          document.getElementById("email").innerText = "üìß Temp Email: stopped";
        }).stopMonitoring();
      }

      function refresh() {
        google.script.run.withSuccessHandler(email => {
          document.getElementById("email").innerText = "üìß Temp Email: " + email;
        }).getEmail();

        google.script.run.withSuccessHandler(logs => {
          const out = logs.map(r => `${r[0]} | ${r[1] || ''}`).join('\n');
          document.getElementById("processLogs").innerHTML = `<pre>${out}</pre>`;
        }).getProcessLogs();

        google.script.run.withSuccessHandler(data => {
          const out = data.map(r => r.join(" | ")).join('\n');
          document.getElementById("sheetLogs").innerHTML = `<pre>${out}</pre>`;
        }).getLogs();
      }

      setInterval(refresh, 5000);
      refresh();
    </script>
  </body>
</html>
