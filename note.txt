openai
requests
python-dotenv
selenium
pydrive




ELEVENLABS_API_KEY=your_elevenlabs_api_key
GOOGLE_DRIVE_FOLDER_ID=your_google_drive_folder_id
OPENAI_API_KEY=your_openai_api_key
HEADLESS=true





import os
from dotenv import load_dotenv

def get_config():
    load_dotenv()
    return {
        'elevenlabs_api_key': os.getenv('ELEVENLABS_API_KEY'),
        'google_drive_folder_id': os.getenv('GOOGLE_DRIVE_FOLDER_ID'),
        'openai_api_key': os.getenv('OPENAI_API_KEY'),
        'headless': os.getenv('HEADLESS', 'true').lower() == 'true'
    }






from datetime import datetime

def format_prompt(time_range, greeting, topics):
    today = datetime.now().strftime("%Y-%m-%d")
    return f"""
{greeting}
{today} роиро╛роЯрпНроХро╛роЯрпНроЯро┐ропро┐ро▓рпН {time_range} ро╡ро░рпИ роЗроирпНродро┐ропро╛ро╡ро┐ро▓ро┐ро░рпБроирпНродрпБ роХро┐роЯрпИродрпНрод роорпБроХрпНроХро┐роп роЪрпЖропрпНродро┐роХро│рпН:

{topics}

роЗройрпНро▒рпИроп ро╡роЪройроорпН: "роЙро┤рпИрокрпНрокро╡ройрпН роХройро╡рпБ родро╛ройрпН роиро╛ро│рпИроп роиро┐роЬроорпН."
роЗродрпБ рокрпЛро▓ родро┐ройроЪро░ро┐ роЪрпЖропрпНродро┐роХро│рпН родрпЖро░ро┐роирпНродрпБроХрпКро│рпНро│ like, share, subscribe рооро▒рпНро▒рпБроорпН comment роЪрпЖропрпНропрпБроЩрпНроХро│рпН.
"""

def get_all_prompts():
    return [
        {
            "title": "Morning",
            "filename": "morning_news.mp3",
            "prompt": format_prompt(
                "00:00:00 to 07:00:00",
                "ро╡рогроХрпНроХроорпН! роЗройрпНро▒рпБ роХро╛ро▓рпИ роирпЗро░роорпН, роЗроирпНродро┐ропро╛ро╡ро┐ро▓рпН роироЯроирпНрод роорпБроХрпНроХро┐роп роиро┐роХро┤рпНро╡рпБроХро│рпН роЗродрпЛ:",
                "роЕро░роЪро┐ропро▓рпН, родрпЗроЪро┐роп рокро╛родрпБроХро╛рокрпНрокрпБ, рокрпКро░рпБро│ро╛родро╛ро░роорпН, роХро▓рпНро╡ро┐, родрпКро┤ро┐ро▓рпН, роЪрпБроХро╛родро╛ро░роорпН, рооро▒рпНро▒рпБроорпН рокрпКродрпБ роЪрпЖропрпНродро┐роХро│рпН"
            )
        },
        {
            "title": "Afternoon",
            "filename": "afternoon_news.mp3",
            "prompt": format_prompt(
                "07:00:00 to 13:00:00",
                "ро╡рогроХрпНроХроорпН! роЗройрпНро▒рпБ роородро┐роп роирпЗро░родрпНродро┐ро▓рпН роЗроирпНродро┐ропро╛ро╡ро┐ро▓рпН рокродро┐ро╡ро╛рой роорпБроХрпНроХро┐роп роЪрпЖропрпНродро┐роХро│рпН роЗро╡рпИ:",
                "роЕро░роЪро┐ропро▓рпН, роХро▓рпНро╡ро┐, рокрпКро░рпБро│ро╛родро╛ро░роорпН, родрпКро┤ро┐ро▓рпН, роороХрпНроХро│рпН роиро▓ройрпН, рооро▒рпНро▒рпБроорпН рокрпКродрпБ роиро┐роХро┤рпНро╡рпБроХро│рпН"
            )
        },
        {
            "title": "Evening",
            "filename": "evening_news.mp3",
            "prompt": format_prompt(
                "13:00:00 to 19:00:00",
                "рооро╛ро▓рпИ ро╡рогроХрпНроХроорпН! роЗройрпНро▒рпБ рооро╛ро▓рпИ роЗроирпНродро┐ропро╛ро╡ро┐ро▓рпН роиро┐роХро┤рпНроирпНрод роорпБроХрпНроХро┐роп роЪрпЖропрпНродро┐роХро│рпН роЗродрпЛ:",
                "роЕро░роЪро┐ропро▓рпН, родрпКро┤ро┐ро▓рпН, родрпЗроЪро┐роп роЪрпЖропрпНродро┐роХро│рпН, роХро▓рпНро╡ро┐, роороХрпНроХро│рпН роиро▓ройрпН, рооро▒рпНро▒рпБроорпН рокрпКродрпБ роиро┐роХро┤рпНро╡рпБроХро│рпН"
            )
        },
        {
            "title": "Night",
            "filename": "night_news.mp3",
            "prompt": format_prompt(
                "19:00:00 to 22:30:00",
                "роЗро░ро╡ро┐ройрпН ро╡рогроХрпНроХроорпН! роЗройрпНро▒рпБ роЗро░ро╡рпБ 7 роорогро┐ роорпБродро▓рпН 10.30 роорогро┐ ро╡ро░рпИ роЗроирпНродро┐ропро╛ро╡ро┐ро▓рпН роироЯроирпНрод роорпБроХрпНроХро┐роп роЪрпЖропрпНродро┐роХро│рпН:",
                "роЕро░роЪро┐ропро▓рпН, родрпЗроЪро┐роп рокро╛родрпБроХро╛рокрпНрокрпБ, родрпКро┤ро┐ро▓рпН, рокрпКродрпБ роиро┐роХро┤рпНро╡рпБроХро│рпН, роХро▓рпНро╡ро┐, рооро▒рпНро▒рпБроорпН роЪрпБроХро╛родро╛ро░роорпН"
            )
        }
    ]








import openai
from src.config import get_config

config = get_config()
openai.api_key = config['openai_api_key']

def generate_news_text(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response['choices'][0]['message']['content']







import requests
import time

def generate_speech(api_key, text, voice_id='EXAVITQu4vr4xnSDxMaL', filename=None):
    url = f'https://api.elevenlabs.io/v1/text-to-speech/{voice_id}'
    headers = {
        'xi-api-key': api_key,
        'Content-Type': 'application/json',
        'Accept': 'audio/mpeg'
    }
    payload = {
        'text': text,
        'model_id': 'eleven_monolingual_v1',
        'voice_settings': {
            'stability': 0.2,
            'similarity_boost': 0.8,
            'style': 0.6,
            'use_speaker_boost': True
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    filename = filename or f"{int(time.time())}.mp3"
    with open(filename, 'wb') as f:
        f.write(response.content)
    return filename






from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

def upload_to_drive(file_path, folder_id):
    gauth = GoogleAuth()
    gauth.LocalWebserverAuth()
    drive = GoogleDrive(gauth)
    file = drive.CreateFile({'title': file_path, 'parents': [{'id': folder_id}]})
    file.SetContentFile(file_path)
    file.Upload()








from src.config import get_config
from src.tts_generator import generate_speech
from src.drive_uploader import upload_to_drive
from src.news_generator import generate_news_text
from prompts.tamil_news_prompts import get_all_prompts

def main():
    config = get_config()
    prompts = get_all_prompts()

    for item in prompts:
        print(f"ЁЯФ╣ Generating news for: {item['title']}")
        news_text = generate_news_text(item["prompt"])
        print("тЬЕ News text generated.")

        mp3_file = generate_speech(config['elevenlabs_api_key'], news_text, filename=item["filename"])
        print(f"тЬЕ Audio saved: {mp3_file}")

        upload_to_drive(mp3_file, config['google_drive_folder_id'])
        print(f"тЬЕ Uploaded to Google Drive: {mp3_file}\n")

if __name__ == "__main__":
    main()









name: News Audio Automation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run news generator
        env:
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HEADLESS: "true"
        run: |
          python run.py
