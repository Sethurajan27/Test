let token = '';
let account = {};
let lastMessageId = '';
let logHistory = [];

function doGet() {
  return HtmlService.createHtmlOutputFromFile('Page')
    .setTitle('Mail.tm Inbox Monitor')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function startMonitoring() {
  token = '';
  account = {};
  lastMessageId = '';
  logHistory = [];

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  sheet.clear();
  sheet.appendRow(['Type', 'Timestamp', 'Email Address', 'Sender', 'Subject', 'OTP', 'Verification Link', 'Body']);

  const domains = JSON.parse(UrlFetchApp.fetch('https://api.mail.tm/domains').getContentText());
  const domain = domains['hydra:member'][0].domain;

  const email = 'temp' + Math.floor(Math.random() * 100000) + '@' + domain;
  const password = 'Test1234!';

  UrlFetchApp.fetch('https://api.mail.tm/accounts', {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password }),
    muteHttpExceptions: true
  });

  const loginResponse = UrlFetchApp.fetch('https://api.mail.tm/token', {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });
  const loginData = JSON.parse(loginResponse.getContentText());
  token = loginData.token;
  account.email = email;
  account.password = password;

  const now = new Date();
  sheet.appendRow(['INIT', now, email, '', '', '', '', '']);
  logHistory.push(`[${now.toLocaleString()}] Monitoring started. Email: ${email}`);

  ScriptApp.newTrigger('pollInbox')
    .timeBased()
    .everyMinutes(1)
    .create();

  return { email, log: logHistory.join('\n') };
}

function pollInbox() {
  if (!token) return;

  const inbox = UrlFetchApp.fetch('https://api.mail.tm/messages', {
    method: 'get',
    headers: { Authorization: 'Bearer ' + token }
  });
  const messages = JSON.parse(inbox.getContentText())['hydra:member'];

  if (messages.length === 0 || messages[0].id === lastMessageId) return;

  const msg = messages[0];
  lastMessageId = msg.id;

  const details = UrlFetchApp.fetch(`https://api.mail.tm/messages/${msg.id}`, {
    method: 'get',
    headers: { Authorization: 'Bearer ' + token }
  });
  const content = JSON.parse(details.getContentText());

  const timestamp = content.createdAt;
  const sender = content.from.address;
  const subject = content.subject;
  const body = content.text;

  const otp = extractOTP(body);
  const link = extractVerificationLink(body);

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  sheet.appendRow([
    'EMAIL', timestamp, account.email, sender, subject,
    otp || 'NULL', link || 'NULL', body
  ]);

  const logLine = `[${new Date().toLocaleTimeString()}] Email from ${sender} | OTP: ${otp || 'NULL'} | Link: ${link || 'NULL'}`;
  logHistory.push(logLine);
}

function extractOTP(text) {
  const match = text.match(/\b\d{4,8}\b/);
  return match ? match[0] : '';
}

function extractVerificationLink(text) {
  const match = text.match(/https?:\/\/[^\s]*(verify|action)[^\s]*/i);
  return match ? match[0] : '';
}

function getLiveLog() {
  return logHistory.join('\n');
}

function stopMonitoring() {
  const allTriggers = ScriptApp.getProjectTriggers();
  for (let t of allTriggers) {
    if (t.getHandlerFunction() === 'pollInbox') {
      ScriptApp.deleteTrigger(t);
    }
  }
  logHistory.push(`[${new Date().toLocaleString()}] Monitoring stopped.`);
  return { stopped: true, log: logHistory.join('\n') };
}
