const emailDomain = '1secmail.com';
const TRIGGER_FUNCTION = 'pollInboxFast';

// Serve the HTML UI
function doGet() {
  return HtmlService.createHtmlOutputFromFile('Page')
    .setTitle('1SecMail Monitor')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// Get or create the Inbox sheet
function getInboxSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName('Inbox');
  if (!sheet) {
    sheet = ss.insertSheet('Inbox');
  }
  return sheet;
}

// Start monitoring and return generated email
function startMonitoring() {
  const login = Utilities.getUuid().split('-')[0];
  const email = `${login}@${emailDomain}`;
  const timestamp = new Date().toLocaleString();

  PropertiesService.getScriptProperties().setProperty('email', email);
  PropertiesService.getScriptProperties().setProperty('running', 'true');

  const sheet = getInboxSheet();
  sheet.appendRow(['--- Monitoring Started ---', timestamp, email, '', '']);
  sheet.appendRow(['Email ID', 'Timestamp', 'Sender', 'OTP', 'Inbox Content']);

  return email;
}

// Stop the monitoring
function stopMonitoring() {
  PropertiesService.getScriptProperties().setProperty('running', 'false');
  const allTriggers = ScriptApp.getProjectTriggers();
  allTriggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === TRIGGER_FUNCTION) {
      ScriptApp.deleteTrigger(trigger);
    }
  });
}

// Poll inbox for new messages
function pollInboxFast() {
  const isRunning = PropertiesService.getScriptProperties().getProperty('running');
  if (isRunning !== 'true') return { status: 'Monitoring is off' };

  const email = PropertiesService.getScriptProperties().getProperty('email');
  if (!email) return { status: 'No email generated yet' };

  const [login, domain] = email.split('@');
  const listUrl = `https://www.1secmail.com/api/v1/?action=getMessages&login=${login}&domain=${domain}`;
  const response = UrlFetchApp.fetch(listUrl);
  const messages = JSON.parse(response.getContentText());

  const sheet = getInboxSheet();
  let lastRow = sheet.getLastRow();
  let existingIDs = [];
  if (lastRow > 2) {
    existingIDs = sheet.getRange(3, 1, lastRow - 2, 1).getValues().flat();
  }

  let newCount = 0;

  messages.forEach(msg => {
    if (!existingIDs.includes(String(msg.id))) {
      const detailUrl = `https://www.1secmail.com/api/v1/?action=readMessage&login=${login}&domain=${domain}&id=${msg.id}`;
      const detail = JSON.parse(UrlFetchApp.fetch(detailUrl).getContentText());

      const content = detail.body || detail.textBody || '';
      const otpMatch = content.match(/\b\d{4,8}\b/);
      const otp = otpMatch ? otpMatch[0] : '';

      sheet.appendRow([
        msg.id,
        detail.date,
        detail.from,
        otp,
        content
      ]);
      newCount++;
    }
  });

  return {
    status: `Checked inbox at ${new Date().toLocaleTimeString()} ‚Äî ${newCount} new message(s)`,
    email: email
  };
}










<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 20px;
        background: #f0f0f0;
      }
      button {
        margin: 10px 5px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
      }
      #email {
        font-weight: bold;
        margin-top: 15px;
        font-size: 16px;
      }
      #log {
        margin-top: 20px;
        background: white;
        border: 1px solid #ccc;
        padding: 10px;
        height: 300px;
        overflow-y: scroll;
        font-family: monospace;
        white-space: pre-wrap;
        font-size: 13px;
      }
    </style>
  </head>
  <body>
    <h2>üì¨ 1SecMail OTP Monitor</h2>
    <button onclick="start()">‚ñ∂ Start Monitoring</button>
    <button onclick="stop()">‚èπ Stop Monitoring</button>
    <div id="email">Email: Not started</div>
    <div id="log">Status: Waiting to start...</div>

    <script>
      let intervalID = null;

      function log(msg) {
        const logEl = document.getElementById('log');
        const now = new Date().toLocaleTimeString();
        logEl.textContent += `\n[${now}] ${msg}`;
        logEl.scrollTop = logEl.scrollHeight;
      }

      function start() {
        log("Starting monitoring...");
        google.script.run.withSuccessHandler(function(email) {
          document.getElementById('email').textContent = "Email: " + email;
          log("Monitoring started for: " + email);
          intervalID = setInterval(checkInbox, 15000); // every 15 sec
        }).startMonitoring();
      }

      function stop() {
        google.script.run.stopMonitoring();
        clearInterval(intervalID);
        log("Monitoring stopped.");
        document.getElementById('email').textContent = "Email: Monitoring stopped.";
      }

      function checkInbox() {
        google.script.run.withSuccessHandler(function(result) {
          if (result && result.status) {
            log(result.status);
          } else {
            log("No response from server.");
          }
        }).pollInboxFast();
      }
    </script>
  </body>
</html>
