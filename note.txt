const SHEET_NAME = 'TempMail Logs';
const LOG_SHEET_NAME = 'Process Logs';
const ID_COLUMN = 8; // H column for Message ID

function ensureSpreadsheet() {
  const props = PropertiesService.getScriptProperties();
  const lock = LockService.getScriptLock();
  lock.waitLock(5000);

  let sheetId = props.getProperty('sheetId');
  let ss;

  if (!sheetId) {
    ss = SpreadsheetApp.create("TempMail Inbox Logs");
    sheetId = ss.getId();
    props.setProperty('sheetId', sheetId);

    const inboxSheet = ss.getActiveSheet();
    inboxSheet.setName(SHEET_NAME);
    inboxSheet.appendRow(["MyMailId", "Timestamp", "SenderMailId", "Subject", "OTP", "VerificationLink", "Body", "MessageID"]);

    const logSheet = ss.insertSheet(LOG_SHEET_NAME);
    logSheet.appendRow(["Timestamp", "Log"]);

    logProcess("‚úÖ New spreadsheet created.");
  } else {
    ss = SpreadsheetApp.openById(sheetId);
  }

  lock.releaseLock();
  return ss;
}

function clearSpreadsheetData() {
  const ss = ensureSpreadsheet();
  const inboxSheet = ss.getSheetByName(SHEET_NAME);
  const logSheet = ss.getSheetByName(LOG_SHEET_NAME);

  inboxSheet.clearContents();
  inboxSheet.appendRow(["MyMailId", "Timestamp", "SenderMailId", "Subject", "OTP", "VerificationLink", "Body", "MessageID"]);

  logSheet.clearContents();
  logSheet.appendRow(["Timestamp", "Log"]);

  logProcess("üßπ Spreadsheet cleared for new session.");
}

function logProcess(msg) {
  const ss = ensureSpreadsheet();
  const logSheet = ss.getSheetByName(LOG_SHEET_NAME);
  logSheet.appendRow([new Date(), msg]);
}

function stopMonitoring() {
  const props = PropertiesService.getScriptProperties();
  props.setProperty('monitoring', 'false');
  props.deleteProperty('token');
  props.deleteProperty('email');

  ScriptApp.getProjectTriggers().forEach(t => {
    if (t.getHandlerFunction() === 'fetchInbox') ScriptApp.deleteTrigger(t);
  });

  clearSpreadsheetData();
  logProcess("‚èπ Monitoring stopped and spreadsheet cleared.");
  return "Monitoring stopped.";
}

function startMonitoring() {
  stopMonitoring(); // Stops and clears previous session
  logProcess("‚ñ∂ Starting new monitoring session");

  const props = PropertiesService.getScriptProperties();
  props.setProperty('monitoring', 'true');

  const domainRes = UrlFetchApp.fetch('https://api.mail.tm/domains');
  const domain = JSON.parse(domainRes.getContentText())['hydra:member'][0].domain;
  const email = `user${Date.now()}@${domain}`;
  const password = `Pass${Date.now()}`;

  logProcess("üõ† Creating temp account: " + email);

  UrlFetchApp.fetch('https://api.mail.tm/accounts', {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });

  const loginRes = UrlFetchApp.fetch('https://api.mail.tm/token', {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });

  const token = JSON.parse(loginRes.getContentText()).token;

  props.setProperty('token', token);
  props.setProperty('email', email);

  const ss = ensureSpreadsheet();
  const inboxSheet = ss.getSheetByName(SHEET_NAME);
  inboxSheet.appendRow([email, new Date(), "NULL", "STARTED", "NULL", "NULL", "NULL", "NULL"]);

  logProcess("‚úÖ Monitoring started with temp email: " + email);

  ScriptApp.newTrigger('fetchInbox')
    .timeBased()
    .everyMinutes(1)
    .create();

  return email;
}

function extractVerificationUrls(emailText) {
  const urlPattern = /https:\/\/elevenlabs\.io\/app\/action\?mode=verifyEmail&[^)\s]+/g;
  const matches = emailText.match(urlPattern);
  return matches || [];
}

function fetchInbox() {
  const props = PropertiesService.getScriptProperties();
  if (props.getProperty('monitoring') !== 'true') return;

  const token = props.getProperty('token');
  const email = props.getProperty('email');
  const ss = ensureSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_NAME);
  const lastRow = sheet.getLastRow();

  const loggedIDs = new Set(
    sheet.getRange(2, ID_COLUMN, lastRow - 1).getValues().flat().filter(id => id)
  );

  const inboxRes = UrlFetchApp.fetch("https://api.mail.tm/messages", {
    headers: { Authorization: `Bearer ${token}` }
  });

  const messages = JSON.parse(inboxRes.getContentText())['hydra:member'];
  if (!messages || messages.length === 0) return;

  logProcess(`üì© Fetched ${messages.length} messages`);

  const newRows = [];

  messages.forEach(msg => {
    if (loggedIDs.has(msg.id)) return;

    const fullRes = UrlFetchApp.fetch(`https://api.mail.tm/messages/${msg.id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const full = JSON.parse(fullRes.getContentText());

    const otp = full.text.match(/\b\d{4,8}\b/);
    const verificationUrls = extractVerificationUrls(full.text);
    const link = verificationUrls.length > 0 ? verificationUrls[0] : "NULL";

    newRows.push([
      email,
      msg.createdAt,
      msg.from.address,
      msg.subject,
      otp ? otp[0] : "NULL",
      link,
      full.text,
      msg.id
    ]);

    logProcess("‚úÖ Logged new message: " + msg.subject);
  });

  if (newRows.length) {
    sheet.getRange(lastRow + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
  } else {
    logProcess("‚ÑπÔ∏è No new messages to log.");
  }
}

function getLogs() {
  const ss = ensureSpreadsheet();
  return ss.getSheetByName(SHEET_NAME).getDataRange().getValues();
}

function getProcessLogs() {
  const ss = ensureSpreadsheet();
  return ss.getSheetByName(LOG_SHEET_NAME).getDataRange().getValues();
}

function getEmail() {
  return PropertiesService.getScriptProperties().getProperty('email') || '';
}

function doGet() {
  return HtmlService.createHtmlOutputFromFile('Index');
}
