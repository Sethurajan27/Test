function extractOpenAiOtp(emailText) {
  // Match a 6-digit number likely used as an OTP
  const otpMatch = emailText.match(/\b\d{6}\b/);
  return otpMatch ? otpMatch[0] : "NULL";
}


function fetchInbox() {
  const props = PropertiesService.getScriptProperties();
  if (props.getProperty('monitoring') !== 'true') return;

  const token = props.getProperty('token');
  const email = props.getProperty('email');
  const ss = ensureSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_NAME);
  const lastRow = sheet.getLastRow();

  const loggedIDs = new Set(
    sheet.getRange(2, ID_COLUMN, lastRow - 1).getValues().flat().filter(id => id)
  );

  const inboxRes = UrlFetchApp.fetch("https://api.mail.tm/messages", {
    headers: { Authorization: `Bearer ${token}` }
  });

  const messages = JSON.parse(inboxRes.getContentText())['hydra:member'];
  if (!messages || messages.length === 0) return;

  logProcess(`üì© Fetched ${messages.length} messages`);

  const newRows = [];

  messages.forEach(msg => {
    if (loggedIDs.has(msg.id)) return;

    const fullRes = UrlFetchApp.fetch(`https://api.mail.tm/messages/${msg.id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const full = JSON.parse(fullRes.getContentText());

    const otp = extractOpenAiOtp(full.text);
    const verificationUrls = extractVerificationUrls(full.text);
    const link = verificationUrls.length > 0 ? verificationUrls[0] : "NULL";

    newRows.push([
      email,
      msg.createdAt,
      msg.from.address,
      msg.subject,
      otp,
      link,
      full.text,
      msg.id
    ]);

    logProcess("‚úÖ Logged new message: " + msg.subject);
  });

  if (newRows.length) {
    sheet.getRange(lastRow + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
  } else {
    logProcess("‚ÑπÔ∏è No new messages to log.");
  }
}
