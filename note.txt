var logs = [];

function startMonitoring() {
  const props = PropertiesService.getScriptProperties();
  props.setProperty('monitoring', 'true'); // Always allow new session

  logEvent("Initializing new monitoring session...");

  // 1. Generate new temp mail
  const domainRes = UrlFetchApp.fetch('https://api.mail.tm/domains');
  const domain = JSON.parse(domainRes.getContentText())['hydra:member'][0].domain;
  const email = `user${Date.now()}@${domain}`;
  const password = `P@ss${Date.now()}`;

  logEvent("Creating temporary mail: " + email);

  UrlFetchApp.fetch('https://api.mail.tm/accounts', {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });

  const loginRes = UrlFetchApp.fetch('https://api.mail.tm/token', {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ address: email, password })
  });

  const token = JSON.parse(loginRes.getContentText()).token;

  logEvent("Temp mail created and token received.");

  // 2. Create new spreadsheet
  const sheet = SpreadsheetApp.create("TempMail Logs " + new Date().toISOString());
  const sheetId = sheet.getId();
  sheet.appendRow(["MyMailId", "Timestamp", "SenderMailId", "Subject", "OTP", "VerificationLink", "Body"]);
  sheet.appendRow([email, new Date(), "NULL", "STARTED", "NULL", "NULL", "NULL"]);

  logEvent("Logged STARTED row in spreadsheet.");

  props.setProperties({
    monitoring: 'true',
    token,
    email,
    sheetId
  });

  return "ok";
}

function stopMonitoring() {
  const props = PropertiesService.getScriptProperties();
  props.setProperty('monitoring', 'false');
  logEvent("Monitoring stopped.");
  return "ok";
}

function fetchInbox() {
  const props = PropertiesService.getScriptProperties();
  if (props.getProperty('monitoring') !== 'true') return;

  const token = props.getProperty('token');
  const email = props.getProperty('email');
  const sheetId = props.getProperty('sheetId');
  const sheet = SpreadsheetApp.openById(sheetId).getActiveSheet();

  logEvent("Fetching inbox...");

  const response = UrlFetchApp.fetch("https://api.mail.tm/messages", {
    headers: { Authorization: `Bearer ${token}` }
  });

  const messages = JSON.parse(response.getContentText())['hydra:member'];
  const existing = sheet.getDataRange().getValues().map(row => row[1] + row[3]);

  messages.forEach(msg => {
    const key = msg.createdAt + msg.subject;
    if (existing.includes(key)) return;

    const fullMsg = JSON.parse(UrlFetchApp.fetch(`https://api.mail.tm/messages/${msg.id}`, {
      headers: { Authorization: `Bearer ${token}` }
    }).getContentText());

    const otp = fullMsg.text.match(/\b\d{4,8}\b/);
    const link = fullMsg.text.match(/https?:\/\/[^\s]+/);

    const row = [
      email,
      msg.createdAt,
      msg.from.address,
      msg.subject,
      otp ? otp[0] : "NULL",
      link ? link[0] : "NULL",
      fullMsg.text
    ];

    sheet.appendRow(row);
    logEvent("New message from: " + msg.from.address + " | Subject: " + msg.subject);
  });
}

function getLogs() {
  return logs;
}

function getSheetData() {
  const props = PropertiesService.getScriptProperties();
  const sheetId = props.getProperty('sheetId');
  if (!sheetId) return [];

  const sheet = SpreadsheetApp.openById(sheetId).getActiveSheet();
  return sheet.getDataRange().getValues();
}

function getEmail() {
  return PropertiesService.getScriptProperties().getProperty('email') || '';
}

function logEvent(message) {
  const time = new Date().toLocaleTimeString();
  logs.push(`[${time}] ${message}`);
  if (logs.length > 1000) logs.shift(); // limit
}

function doGet() {
  return HtmlService.createHtmlOutputFromFile('Index');
}







<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <style>
      body { font-family: Arial; padding: 20px; }
      button { margin: 5px; padding: 10px 20px; font-size: 16px; }
      .section { margin-top: 20px; }
      pre {
        background: #f4f4f4;
        padding: 10px;
        border-radius: 6px;
        white-space: pre-wrap;
        max-height: 300px;
        overflow-y: auto;
      }
    </style>
  </head>
  <body>
    <h2>üì¨ Temp Mail Monitor</h2>
    <button onclick="start()">‚ñ∂ Start Monitoring</button>
    <button onclick="stop()">‚èπ Stop Monitoring</button>
    <p id="email">üìß Email: <em>none</em></p>

    <div class="section">
      <h3>üîß Process Log</h3>
      <div id="process"><pre>Waiting...</pre></div>
    </div>

    <div class="section">
      <h3>üìÑ Spreadsheet Log</h3>
      <div id="sheet"><pre>Waiting...</pre></div>
    </div>

    <script>
      function start() {
        google.script.run.withSuccessHandler(() => {
          getEmail();
        }).startMonitoring();
      }

      function stop() {
        google.script.run.withSuccessHandler(() => {
          document.getElementById("email").innerText = "üìß Email: stopped";
        }).stopMonitoring();
      }

      function getEmail() {
        google.script.run.withSuccessHandler(email => {
          document.getElementById("email").innerText = "üìß Email: " + email;
        }).getEmail();
      }

      function updateLogs() {
        google.script.run.withSuccessHandler(renderProcess).getLogs();
        google.script.run.withSuccessHandler(renderSheet).getSheetData();
        google.script.run.fetchInbox(); // fetch new mail
      }

      function renderProcess(data) {
        document.getElementById("process").innerHTML = "<pre>" + data.join("\n") + "</pre>";
      }

      function renderSheet(data) {
        if (!data || data.length === 0) {
          document.getElementById("sheet").innerHTML = "<pre>No data</pre>";
          return;
        }
        const lines = data.map(row => row.join(" | "));
        document.getElementById("sheet").innerHTML = "<pre>" + lines.join("\n") + "</pre>";
      }

      // Initial
      getEmail();
      updateLogs();
      setInterval(updateLogs, 15000); // every 15 seconds
    </script>
  </body>
</html>
