To fully automate the OpenAI and ElevenLabs account creation using temporary emails from Mail.tm, generate an ElevenLabs API key, convert text to speech, and upload the resulting audio to a specified Google Drive folder, you can follow the structured approach below. 


---

📁 Project Structure

openai-signup-automation/
├── .github/
│   └── workflows/
│       └── ci.yml
├── src/
│   ├── __init__.py
│   ├── config.py
│   ├── mailtm_client.py
│   ├── openai_signup.py
│   ├── elevenlabs_signup.py
│   ├── tts_generator.py
│   └── drive_uploader.py
├── tests/
│   └── test_signup.py
├── .env.example
├── .gitignore
├── README.md
└── requirements.txt




---

🔧 Setup Instructions

1. Clone the Repository:

git clone https://github.com/yourusername/openai-signup-automation.git
cd openai-signup-automation





2. Install Dependencies:

pip install -r requirements.txt





3. Configure Environment Variables:

Rename .env.example to .env.

Fill in the required fields: 

ELEVENLABS_API_KEY=your_elevenlabs_api_key
GOOGLE_DRIVE_FOLDER_ID=1zWdn50DVXpBWcuX62wP2UoR0M2WU6_jb
HEADLESS=true



4. Run the Automation Script:

python -m src.openai_signup






---

📄 Key Components

1. src/config.py

Handles loading environment variables. 

import os
from dotenv import load_dotenv

def get_config():
    load_dotenv()
    return {
        'elevenlabs_api_key': os.getenv('ELEVENLABS_API_KEY'),
        'google_drive_folder_id': os.getenv('GOOGLE_DRIVE_FOLDER_ID'),
        'headless': os.getenv('HEADLESS', 'true').lower() == 'true'
    }



2. src/mailtm_client.py

Manages temporary email creation and inbox monitoring using Mail.tm API. 

import requests
import time

class MailTMClient:
    def __init__(self):
        self.base_url = 'https://api.mail.tm'
        self.session = requests.Session()
        self.account = self.create_account()
        self.token = self.get_token()

    def create_account(self):
        domain = self.session.get(f'{self.base_url}/domains').json()['hydra:member'][0]['domain']
        email = f'test{int(time.time())}@{domain}'
        password = 'Password123!'
        response = self.session.post(f'{self.base_url}/accounts', json={'address': email, 'password': password})
        return {'email': email, 'password': password}

    def get_token(self):
        response = self.session.post(f'{self.base_url}/token', json=self.account)
        return response.json()['token']

    def wait_for_email(self, subject_keyword, timeout=300):
        headers = {'Authorization': f'Bearer {self.token}'}
        start_time = time.time()
        while time.time() - start_time < timeout:
            messages = self.session.get(f'{self.base_url}/messages', headers=headers).json()['hydra:member']
            for message in messages:
                if subject_keyword in message['subject']:
                    msg = self.session.get(f"{self.base_url}/messages/{message['id']}", headers=headers).json()
                    return msg['text']
            time.sleep(5)
        raise TimeoutError("Email not received within timeout period.")



3. src/openai_signup.py

Automates OpenAI account creation using Selenium and the temporary email. 

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from src.mailtm_client import MailTMClient
import time

def init_driver(headless=True):
    options = Options()
    if headless:
        options.add_argument('--headless')
    driver = webdriver.Chrome(options=options)
    return driver

def openai_signup(driver, email, password):
    driver.get('https://auth.openai.com/signup')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'email'))).send_keys(email)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Continue')]").click()
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'password'))).send_keys(password)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Continue')]").click()
    # Wait for email verification
    time.sleep(10)



4. src/elevenlabs_signup.py

Automates ElevenLabs account creation and retrieves the API key. 

def elevenlabs_signup(driver, email, password):
    driver.get('https://www.elevenlabs.io/signup')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'email'))).send_keys(email)
    driver.find_element(By.NAME, 'password').send_keys(password)
    driver.find_element(By.XPATH, "//button[contains(text(), 'Sign Up')]").click()
    # Wait for email verification
    time.sleep(10)
    # After verification, retrieve API key from account settings



5. src/tts_generator.py

Generates speech from text using ElevenLabs API and saves it as an MP3 file. 

import requests
import time

def generate_speech(api_key, text, voice_id='EXAVITQu4vr4xnSDxMaL'):
    url = f'https://api.elevenlabs.io/v1/text-to-speech/{voice_id}'
    headers = {
        'xi-api-key': api_key,
        'Content-Type': 'application/json',
        'Accept': 'audio/mpeg'
    }
    payload = {
        'text': text,
        'model_id': 'eleven_monolingual_v1',
        'voice_settings': {
            'stability': 0.2,
            'similarity_boost': 0.8,
            'style': 0.6,
            'use_speaker_boost': True
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    filename = f"{int(time.time())}.mp3"
    with open(filename, 'wb') as f:
        f.write(response.content)
    return filename



6. src/drive_uploader.py

Uploads the generated MP3 file to the specified Google Drive folder. 

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

def upload_to_drive(file_path, folder_id):
    gauth = GoogleAuth()
    gauth.LocalWebserverAuth()
    drive = GoogleDrive(gauth)
    file = drive.CreateFile({'title': file_path, 'parents': [{'id': folder_id}]})
    file.SetContentFile(file_path)
    file.Upload()




---

🚀 GitHub Actions CI/CD

To automate the process using GitHub Actions, add the following workflow: 

name: OpenAI and ElevenLabs Automation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run automation script
      env:
        ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        HEADLESS: "true"
      run: |
        python -m src.openai_signup




---

📝 Notes

Google Drive Authentication: The drive_uploader.py script uses PyDrive for uploading files. Ensure that you have set up Google Drive API credentials and have the client_secrets.json file in your project directory. 

Email Verification: Both OpenAI and ElevenLabs require email verification. The scripts wait for the verification email and proceed once it's received. 

Security: Never hardcode sensitive information like API keys or passwords. Always use environment variables or secure secrets management. 



---

By following this structured approach, you can automate the entire process of account creation, API key retrieval, text-to-speech conversion, and uploading the result to Google Drive. 

---

